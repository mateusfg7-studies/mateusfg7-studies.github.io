<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>getting-start, cli, code, programming, learn-elixir on Mateus Felipe</title><link>https://mateusfg7-studies.github.io/tags/getting-start-cli-code-programming-learn-elixir/</link><description>Recent content in getting-start, cli, code, programming, learn-elixir on Mateus Felipe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mateusfg7-studies.github.io/tags/getting-start-cli-code-programming-learn-elixir/index.xml" rel="self" type="application/rss+xml"/><item><title>Learn Elixir #4</title><link>https://mateusfg7-studies.github.io/posts/learn-elixir-ep4/</link><pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate><guid>https://mateusfg7-studies.github.io/posts/learn-elixir-ep4/</guid><description>Unicode and Code Points You can use ? before a character literal to see your code point
iex&amp;gt; ?a 97 iex&amp;gt; ?Å‚ 322 iex&amp;gt; &amp;quot;\u0061&amp;quot; === &amp;quot;a&amp;quot; true iex&amp;gt;0x0061 = 97 = ?a 97 UTF-8 and Encodings Elixir uses UTF-8 to encode its strings, which means that code are encoded as a series of 8-bit bytes
String.length/1 count graphemes, but byte_size/1 reveals the number of underlying raw bytes needed to store the string when using UTF-8.</description></item><item><title>Learn Elixir #3</title><link>https://mateusfg7-studies.github.io/posts/learn-elixir-ep3/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://mateusfg7-studies.github.io/posts/learn-elixir-ep3/</guid><description>Cond Useful to make multi conditions with different values and return the first that match true
cond do 2 + 2 == 5 -&amp;gt; &amp;quot;This will not be true&amp;quot; 2 * 2 == 3 -&amp;gt; &amp;quot;Nor this&amp;quot; 1 + 1 == 2 -&amp;gt; &amp;quot;But this will&amp;quot; end &amp;quot;But this will&amp;quot; This is equivalent to else if clause in many imperative languages (used much less here)
Is necessary add a final condition equal true, which always will match, because if all the conditions return nil of falsean error CondClauseError is raised</description></item><item><title>Learn Elixir #2</title><link>https://mateusfg7-studies.github.io/posts/learn-elixir-ep2/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://mateusfg7-studies.github.io/posts/learn-elixir-ep2/</guid><description>Case case {1, 2, 3} do {1, _x, 3} -&amp;gt; &amp;quot;This clause will match and bind _x to 2 in this clause&amp;quot; {4, 5, 6} -&amp;gt; &amp;quot;This clause won't match&amp;quot; _ -&amp;gt; &amp;quot;This clause would match any value&amp;quot; end &amp;quot;This clause will match and bind _x to 2 in this clause&amp;quot; To use pattern match you need to use pin^ operator
x = 1 case 10 do ^x -&amp;gt; &amp;quot;Won't match&amp;quot; _ -&amp;gt; &amp;quot;Will match&amp;quot; end &amp;quot;Will match&amp;quot; Clause allow extra conditions to be specified via guards</description></item><item><title>Learn Elixir</title><link>https://mateusfg7-studies.github.io/posts/learn-elixir-ep1/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://mateusfg7-studies.github.io/posts/learn-elixir-ep1/</guid><description>Introduction Interactive mode: iex
Initial Commands:
iex&amp;gt; 40 + 2 42 iex&amp;gt; &amp;quot;hello&amp;quot; &amp;lt;&amp;gt; &amp;quot; world&amp;quot; &amp;quot;hello world&amp;quot; Running Scripts: elixir hello-word.exs
Hello Word:
IO.puts &amp;quot;Hello Word&amp;quot; &amp;quot;Hello Word&amp;quot; Basic types Get Data Type: i data iex&amp;gt; i 1 will show something like this:
Term 1 Data type Integer Reference modules Integer Implemented protocols IEx.Info, Inspect, List.Chars, String.Chars Basic Types iex&amp;gt; 1 # integer iex&amp;gt; 0x1F # integer iex&amp;gt; 1.</description></item></channel></rss>